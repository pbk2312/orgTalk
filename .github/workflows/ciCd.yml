# .github/workflows/ciCd.yml - 최적화 버전
name: CI/CD Pipeline

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

  # Database & Redis
  DB_URL: ${{ secrets.DB_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

  # MongoDB
  MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
  MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
  MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}

  # JWT Keys
  ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
  REFRESH_KEY: ${{ secrets.REFRESH_KEY }}
  JWT_ORIGIN_KEY: ${{ secrets.JWT_ORIGIN_KEY }}
  JWT_APP_KEY: ${{ secrets.JWT_APP_KEY }}

  # GitHub OAuth
  OAUTH_GITHUB_CLIENT_ID: ${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
  OAUTH_GITHUB_CLIENT_SECRET: ${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}
  RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME }}
  RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
  RABBITMQ_VHOST: ${{ secrets.RABBITMQ_VHOST }}

  # Frontend
  FRONTEND_REDIRECT_URI: ${{ secrets.FRONTEND_REDIRECT_URI }}

jobs:
  # 변경사항 감지 잡 추가
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      main-server: ${{ steps.changes.outputs.main-server }}
      chat-server: ${{ steps.changes.outputs.chat-server }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'frontend/**'
            main-server:
              - 'backend/main-server/**'
            chat-server:
              - 'backend/chat-server/**'

  # 병렬 테스트 실행
  test-backend:
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ main-server, chat-server ]
        include:
          - service: main-server
            path: backend/main-server
            skip: ${{ needs.changes.outputs.main-server == 'false' }}
          - service: chat-server
            path: backend/chat-server
            skip: ${{ needs.changes.outputs.chat-server == 'false' }}
    steps:
      - uses: actions/checkout@v4
        if: matrix.skip != 'true'

      # Gradle 캐시 추가
      - name: Cache Gradle packages
        if: matrix.skip != 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK 21
        if: matrix.skip != 'true'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        if: matrix.skip != 'true'
        run: chmod +x ./backend/gradlew

      - name: Run ${{ matrix.service }} tests
        if: matrix.skip != 'true'
        run: |
          cd ${{ matrix.path }}
          ../gradlew test --parallel --build-cache
        env:
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          REFRESH_KEY: ${{ secrets.REFRESH_KEY }}
          JWT_ORIGIN_KEY: ${{ secrets.JWT_ORIGIN_KEY }}
          JWT_APP_KEY: ${{ secrets.JWT_APP_KEY }}
          OAUTH_GITHUB_CLIENT_ID: ${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
          OAUTH_GITHUB_CLIENT_SECRET: ${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}
          FRONTEND_REDIRECT_URI: ${{ secrets.FRONTEND_REDIRECT_URI }}
          MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
          MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
          MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
          RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME }}
          RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
          RABBITMQ_VHOST: ${{ secrets.RABBITMQ_VHOST }}

  test-frontend:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Node.js 캐시 추가
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Frontend dependencies
        run: |
          cd frontend
          npm ci  # npm install 대신 npm ci 사용 (더 빠름)

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false --passWithNoTests --maxWorkers=2

  # 병렬 빌드 실행
  build:
    needs: [ changes, test-backend, test-frontend ]
    runs-on: ubuntu-latest
    if: always() && (needs.test-backend.result == 'success' || needs.test-backend.result == 'skipped') && (needs.test-frontend.result == 'success' || needs.test-frontend.result == 'skipped')
    strategy:
      matrix:
        service: [ main-server, chat-server, frontend ]
        include:
          - service: main-server
            context: backend/main-server
            skip: ${{ needs.changes.outputs.main-server == 'false' }}
          - service: chat-server
            context: backend/chat-server
            skip: ${{ needs.changes.outputs.chat-server == 'false' }}
          - service: frontend
            context: frontend
            skip: ${{ needs.changes.outputs.frontend == 'false' }}

    steps:
      - uses: actions/checkout@v4
        if: matrix.skip != 'true'

      # 캐시 설정
      - name: Cache Gradle packages
        if: matrix.skip != 'true' && contains(matrix.service, 'server')
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

      - name: Cache Node.js modules
        if: matrix.skip != 'true' && matrix.service == 'frontend'
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      # 백엔드 빌드
      - name: Set up JDK 21
        if: matrix.skip != 'true' && contains(matrix.service, 'server')
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build Backend Service
        if: matrix.skip != 'true' && contains(matrix.service, 'server')
        run: |
          chmod +x ./backend/gradlew
          cd ${{ matrix.context }}
          ../gradlew build -x test --parallel --build-cache

      # 프론트엔드 빌드
      - name: Set up Node.js
        if: matrix.skip != 'true' && matrix.service == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build Frontend
        if: matrix.skip != 'true' && matrix.service == 'frontend'
        run: |
          cd frontend
          npm ci
          CI=false npm run build

      # Docker Buildx 설정 (멀티플랫폼 빌드 및 캐시 개선)
      - name: Set up Docker Buildx
        if: matrix.skip != 'true'
        uses: docker/setup-buildx-action@v3

      # Docker Hub 로그인
      - name: Login to Docker Hub
        if: matrix.skip != 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # Docker 빌드 및 푸시 (캐시 활용)
      - name: Build and push Docker image
        if: matrix.skip != 'true'
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          push: true
          tags: |
            ${{ env.DOCKER_USERNAME }}/${{ matrix.service }}:${{ github.sha }}
            ${{ env.DOCKER_USERNAME }}/${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - uses: actions/checkout@v4

      # 파일 복사 및 배포 (간소화)
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          envs: DOCKER_USERNAME,DB_URL,DB_USERNAME,DB_PASSWORD,MONGODB_USERNAME,MONGODB_PASSWORD,MONGODB_DATABASE,ACCESS_KEY,REFRESH_KEY,JWT_ORIGIN_KEY,JWT_APP_KEY,OAUTH_GITHUB_CLIENT_ID,OAUTH_GITHUB_CLIENT_SECRET,FRONTEND_REDIRECT_URI,RABBITMQ_USERNAME,RABBITMQ_PASSWORD,RABBITMQ_VHOST
          script: |
            cd /home/ubuntu/orgtalk
            
            # 빠른 배포를 위한 간소화된 스크립트
            echo "Starting deployment..."
            
            # 이전 컨테이너 중지 (백그라운드)
            docker compose down &
            
            # .env 파일 생성
            cat > .env << EOF
            DOCKER_USERNAME=${DOCKER_USERNAME}
            DB_URL=${DB_URL}
            DB_USERNAME=${DB_USERNAME}
            DB_PASSWORD=${DB_PASSWORD}
            MONGODB_USERNAME=${MONGODB_USERNAME}
            MONGODB_PASSWORD=${MONGODB_PASSWORD}
            MONGODB_DATABASE=${MONGODB_DATABASE}
            ACCESS_KEY=${ACCESS_KEY}
            REFRESH_KEY=${REFRESH_KEY}
            JWT_ORIGIN_KEY=${JWT_ORIGIN_KEY}
            JWT_APP_KEY=${JWT_APP_KEY}
            OAUTH_GITHUB_CLIENT_ID=${OAUTH_GITHUB_CLIENT_ID}
            OAUTH_GITHUB_CLIENT_SECRET=${OAUTH_GITHUB_CLIENT_SECRET}
            FRONTEND_REDIRECT_URI=${FRONTEND_REDIRECT_URI}
            RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
            RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
            RABBITMQ_VHOST=${RABBITMQ_VHOST}
            EOF
            
            # 대기
            wait
            
            # 최신 이미지 풀 (병렬)
            docker pull ${DOCKER_USERNAME}/main-server:latest &
            docker pull ${DOCKER_USERNAME}/chat-server:latest &
            docker pull ${DOCKER_USERNAME}/frontend:latest &
            wait
            
            # 서비스 시작
            docker compose up -d
            
            # 간단한 헬스체크
            sleep 15
            if curl -f http://localhost/health 2>/dev/null; then
              echo "✅ Deployment successful!"
              docker image prune -f
            else
              echo "❌ Deployment failed"
              docker compose logs --tail=10
              exit 1
            fi

      # 설정 파일 복사 (별도 step으로 분리)
      - name: Copy config files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          source: "docker-compose.yml,frontend/nginx.conf,frontend/default.conf"
          target: "/home/ubuntu/orgtalk/"
