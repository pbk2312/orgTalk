# .github/workflows/ciCd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

  # Database & Redis
  DB_URL: ${{ secrets.DB_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

  # MongoDB
  MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
  MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
  MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}

  # JWT Keys
  ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
  REFRESH_KEY: ${{ secrets.REFRESH_KEY }}
  JWT_ORIGIN_KEY: ${{ secrets.JWT_ORIGIN_KEY }}
  JWT_APP_KEY: ${{ secrets.JWT_APP_KEY }}

  # GitHub OAuth
  OAUTH_GITHUB_CLIENT_ID: ${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
  OAUTH_GITHUB_CLIENT_SECRET: ${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}

  # Frontend
  FRONTEND_REDIRECT_URI: ${{ secrets.FRONTEND_REDIRECT_URI }}

jobs:
  test:
    if: github.ref == 'refs/heads/dev' # dev 브랜치에서만 진행
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 백엔드 테스트
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./backend/gradlew

      - name: Run Main Server tests
        run: |
          cd backend/main-server
          ../gradlew test
      - name: Run Chat Server tests
        run: |
          cd backend/chat-server
          ../gradlew test

      # 프론트엔드 테스트
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Frontend dependencies
        run: |
          cd frontend
          npm install
      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false --passWithNoTests

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'

    steps:
      - uses: actions/checkout@v4

      # 백엔드 빌드
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./backend/gradlew

      - name: Build Main Server
        run: |
          cd backend/main-server
          ../gradlew build -x test
      - name: Build Chat Server
        run: |
          cd backend/chat-server
          ../gradlew build -x test

      # 프론트엔드 빌드
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install
      - name: Build frontend
        run: |
          cd frontend
          CI=false npm run build

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # GitHub Actions Runner에서 기존 이미지 정리
      - name: Clean up existing Docker images
        run: |
          echo "Cleaning up existing Docker images..."
          # 기존 프로젝트 이미지들 삭제
          docker images | grep -E "${{ env.DOCKER_USERNAME }}/(main-server|chat-server|frontend)" | awk '{print $3}' | xargs -r docker rmi -f || true
          docker image prune -f || true

      # Docker 이미지 빌드 및 푸시
      - name: Build and push Main Server image
        run: |
          cd backend/main-server
          docker build -t ${{ env.DOCKER_USERNAME }}/main-server:${{ github.sha }} .
          docker tag ${{ env.DOCKER_USERNAME }}/main-server:${{ github.sha }} ${{ env.DOCKER_USERNAME }}/main-server:latest
          docker push ${{ env.DOCKER_USERNAME }}/main-server:${{ github.sha }}
          docker push ${{ env.DOCKER_USERNAME }}/main-server:latest
      - name: Build and push Chat Server image
        run: |
          cd backend/chat-server
          docker build -t ${{ env.DOCKER_USERNAME }}/chat-server:${{ github.sha }} .
          docker tag ${{ env.DOCKER_USERNAME }}/chat-server:${{ github.sha }} ${{ env.DOCKER_USERNAME }}/chat-server:latest
          docker push ${{ env.DOCKER_USERNAME }}/chat-server:${{ github.sha }}
          docker push ${{ env.DOCKER_USERNAME }}/chat-server:latest
      - name: Build and push Frontend image
        run: |
          cd frontend
          docker build -t ${{ env.DOCKER_USERNAME }}/frontend:${{ github.sha }} .
          docker tag ${{ env.DOCKER_USERNAME }}/frontend:${{ github.sha }} ${{ env.DOCKER_USERNAME }}/frontend:latest
          docker push ${{ env.DOCKER_USERNAME }}/frontend:${{ github.sha }}
          docker push ${{ env.DOCKER_USERNAME }}/frontend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # master 브랜치에서 배포 실행
    if: github.ref == 'refs/heads/master' || github.event.pull_request.merged == true

    steps:
      - uses: actions/checkout@v4

      # docker-compose.yml 복사
      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/orgtalk/"

      # nginx 설정 파일들 복사
      - name: Copy nginx config files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          source: "frontend/nginx.conf,frontend/default.conf"
          target: "/home/ubuntu/orgtalk/"

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USERNAME }}
          key: ${{ env.EC2_SSH_KEY }}
          envs: DOCKER_USERNAME,DB_URL,DB_USERNAME,DB_PASSWORD,MONGODB_USERNAME,MONGODB_PASSWORD,MONGODB_DATABASE,MAIL_USERNAME,MAIL_PASSWORD,ACCESS_KEY,REFRESH_KEY,JWT_ORIGIN_KEY,JWT_APP_KEY,OAUTH_GITHUB_CLIENT_ID,OAUTH_GITHUB_CLIENT_SECRET,FRONTEND_REDIRECT_URI
          script: |
            cd /home/ubuntu/orgtalk
            
            # 파일 존재 확인
            echo "Checking deployment files..."
            ls -la
            if [ ! -f "docker-compose.yml" ]; then
              echo "❌ docker-compose.yml not found!"
              exit 1
            fi
            echo "✅ docker-compose.yml found"
            
            # 기존 컨테이너 정리
            echo "Stopping existing containers..."
            docker compose down || true
            
            # 기존 이미지들 백업 (rollback용)
            echo "Backing up current images for potential rollback..."
            docker tag ${DOCKER_USERNAME}/main-server:latest ${DOCKER_USERNAME}/main-server:backup 2>/dev/null || true
            docker tag ${DOCKER_USERNAME}/chat-server:latest ${DOCKER_USERNAME}/chat-server:backup 2>/dev/null || true
            docker tag ${DOCKER_USERNAME}/frontend:latest ${DOCKER_USERNAME}/frontend:backup 2>/dev/null || true
            
            # .env 파일 생성
            cat > .env << EOF
            DOCKER_USERNAME=${DOCKER_USERNAME}
            DB_URL=${DB_URL}
            DB_USERNAME=${DB_USERNAME}
            DB_PASSWORD=${DB_PASSWORD}
            MONGODB_USERNAME=${MONGODB_USERNAME}
            MONGODB_PASSWORD=${MONGODB_PASSWORD}
            MONGODB_DATABASE=${MONGODB_DATABASE}
            MAIL_USERNAME=${MAIL_USERNAME}
            MAIL_PASSWORD=${MAIL_PASSWORD}
            ACCESS_KEY=${ACCESS_KEY}
            REFRESH_KEY=${REFRESH_KEY}
            JWT_ORIGIN_KEY=${JWT_ORIGIN_KEY}
            JWT_APP_KEY=${JWT_APP_KEY}
            OAUTH_GITHUB_CLIENT_ID=${OAUTH_GITHUB_CLIENT_ID}
            OAUTH_GITHUB_CLIENT_SECRET=${OAUTH_GITHUB_CLIENT_SECRET}
            FRONTEND_REDIRECT_URI=${FRONTEND_REDIRECT_URI}
            EOF
            
            # 최신 이미지 풀
            echo "Pulling latest Docker images..."
            docker pull ${DOCKER_USERNAME}/main-server:latest
            docker pull ${DOCKER_USERNAME}/chat-server:latest
            docker pull ${DOCKER_USERNAME}/frontend:latest
            
            # 컨테이너 시작
            echo "Starting new containers..."
            docker compose up -d
            
            # 컨테이너 상태 확인
            echo "Container status:"
            docker ps -a
            
            # 로그 확인
            echo "Container logs:"
            docker compose logs --tail=20
            
            # 헬스체크 대기
            echo "Waiting for services to be healthy..."
            sleep 30
            
            # 헬스체크 (포트 확인도 포함)
            echo "Checking service health..."
            if curl -f http://localhost/health 2>/dev/null || curl -f http://localhost 2>/dev/null; then
              echo "✅ Deployment successful!"
            
              # 배포 성공 시 오래된 이미지들 정리
              echo "Cleaning up old Docker images..."
            
              # 백업 이미지 삭제 (배포 성공했으므로)
              docker rmi ${DOCKER_USERNAME}/main-server:backup 2>/dev/null || true
              docker rmi ${DOCKER_USERNAME}/chat-server:backup 2>/dev/null || true  
              docker rmi ${DOCKER_USERNAME}/frontend:backup 2>/dev/null || true
            
              docker image prune -f
            
              docker image prune -a -f --filter "until=24h"
            
              echo "Image cleanup completed!"
            
            else
              echo "❌ Health check failed"
              echo "Current running containers:"
              docker ps
              echo "Container logs:"
              docker compose logs
            
              # 배포 실패 시 백업 이미지로 롤백
              echo "Rolling back to backup images..."
              docker compose down || true
            
              # 백업이 있으면 롤백
              if docker images | grep -q "${DOCKER_USERNAME}/main-server.*backup"; then
                docker tag ${DOCKER_USERNAME}/main-server:backup ${DOCKER_USERNAME}/main-server:latest
                docker tag ${DOCKER_USERNAME}/chat-server:backup ${DOCKER_USERNAME}/chat-server:latest
                docker tag ${DOCKER_USERNAME}/frontend:backup ${DOCKER_USERNAME}/frontend:latest
            
                echo "Restarting with backup images..."
                docker compose up -d
            
                echo "Rollback completed - services restored to previous version"
              else
                echo "No backup images found - containers kept for debugging"
              fi
            
              exit 1
            fi
