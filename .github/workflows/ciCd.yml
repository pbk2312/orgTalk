# .github/workflows/ciCd.yml
name: CI/CD Pipeline

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master, dev ]

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
  EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

  # Database & Redis
  DB_URL: ${{ secrets.DB_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

  # MongoDB
  MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
  MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
  MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}

  # JWT Keys
  ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
  REFRESH_KEY: ${{ secrets.REFRESH_KEY }}
  JWT_ORIGIN_KEY: ${{ secrets.JWT_ORIGIN_KEY }}
  JWT_APP_KEY: ${{ secrets.JWT_APP_KEY }}

  # GitHub OAuth
  OAUTH_GITHUB_CLIENT_ID: ${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
  OAUTH_GITHUB_CLIENT_SECRET: ${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}
  RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME }}
  RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
  RABBITMQ_VHOST: ${{ secrets.RABBITMQ_VHOST }}

  # Frontend
  FRONTEND_REDIRECT_URI: ${{ secrets.FRONTEND_REDIRECT_URI }}

jobs:
  test:
    # dev 브랜치 관련 이벤트 또는 master 브랜치 push에서 실행
    if: |
      (github.event_name == 'pull_request' && github.head_ref == 'dev') ||
      (github.event_name == 'push' && github.ref_name == 'dev') ||
      (github.event_name == 'push' && github.ref_name == 'master')
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [ main-server, chat-server, frontend ]
    steps:
      - uses: actions/checkout@v4

      # 백엔드 테스트 (Main Server)
      - name: Set up JDK 21 for Backend
        if: matrix.test-type == 'main-server' || matrix.test-type == 'chat-server'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        if: matrix.test-type == 'main-server' || matrix.test-type == 'chat-server'
        run: chmod +x ./backend/gradlew

      - name: Run Main Server tests
        if: matrix.test-type == 'main-server'
        run: |
          cd backend/main-server
          ../gradlew test --continue || true
        env:
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          REFRESH_KEY: ${{ secrets.REFRESH_KEY }}
          JWT_ORIGIN_KEY: ${{ secrets.JWT_ORIGIN_KEY }}
          JWT_APP_KEY: ${{ secrets.JWT_APP_KEY }}
          OAUTH_GITHUB_CLIENT_ID: ${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
          OAUTH_GITHUB_CLIENT_SECRET: ${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}
          FRONTEND_REDIRECT_URI: ${{ secrets.FRONTEND_REDIRECT_URI }}

      - name: Run Chat Server tests
        if: matrix.test-type == 'chat-server'
        run: |
          cd backend/chat-server
          ../gradlew test
        env:
          JWT_ORIGIN_KEY: ${{ secrets.JWT_ORIGIN_KEY }}
          JWT_APP_KEY: ${{ secrets.JWT_APP_KEY }}
          MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
          MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
          MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
          RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME }}
          RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
          RABBITMQ_VHOST: ${{ secrets.RABBITMQ_VHOST }}

      # 프론트엔드 테스트
      - name: Set up Node.js
        if: matrix.test-type == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Frontend dependencies
        if: matrix.test-type == 'frontend'
        run: |
          cd frontend
          npm install

      - name: Run frontend tests
        if: matrix.test-type == 'frontend'
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false --passWithNoTests

  build:
    needs: test
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'pull_request' && github.head_ref == 'dev') ||
      (github.event_name == 'push' && github.ref_name == 'dev') ||
      (github.event_name == 'push' && github.ref_name == 'master')
    strategy:
      matrix:
        component: [ main-server, chat-server, frontend ]

    steps:
      - uses: actions/checkout@v4

      # 백엔드 빌드 (Main Server, Chat Server)
      - name: Set up JDK 21 for Backend
        if: matrix.component == 'main-server' || matrix.component == 'chat-server'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Gradle packages
        if: matrix.component == 'main-server' || matrix.component == 'chat-server'
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        if: matrix.component == 'main-server' || matrix.component == 'chat-server'
        run: chmod +x ./backend/gradlew

      - name: Build Main Server
        if: matrix.component == 'main-server'
        run: |
          cd backend/main-server
          ../gradlew build -x test
        env:
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          REFRESH_KEY: ${{ secrets.REFRESH_KEY }}
          JWT_ORIGIN_KEY: ${{ secrets.JWT_ORIGIN_KEY }}
          JWT_APP_KEY: ${{ secrets.JWT_APP_KEY }}
          OAUTH_GITHUB_CLIENT_ID: ${{ secrets.OAUTH_GITHUB_CLIENT_ID }}
          OAUTH_GITHUB_CLIENT_SECRET: ${{ secrets.OAUTH_GITHUB_CLIENT_SECRET }}
          FRONTEND_REDIRECT_URI: ${{ secrets.FRONTEND_REDIRECT_URI }}

      - name: Build Chat Server
        if: matrix.component == 'chat-server'
        run: |
          cd backend/chat-server
          ../gradlew build -x test
        env:
          JWT_ORIGIN_KEY: ${{ secrets.JWT_ORIGIN_KEY }}
          JWT_APP_KEY: ${{ secrets.JWT_APP_KEY }}
          MONGODB_USERNAME: ${{ secrets.MONGODB_USERNAME }}
          MONGODB_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
          MONGODB_DATABASE: ${{ secrets.MONGODB_DATABASE }}
          RABBITMQ_USERNAME: ${{ secrets.RABBITMQ_USERNAME }}
          RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}
          RABBITMQ_VHOST: ${{ secrets.RABBITMQ_VHOST }}

      # 프론트엔드 빌드
      - name: Set up Node.js
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install frontend dependencies
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          npm install

      - name: Build frontend
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          CI=false npm run build

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      # GitHub Actions Runner에서 기존 이미지 정리 (Main Server만 실행)
      - name: Clean up existing Docker images
        if: matrix.component == 'main-server'
        run: |
          echo "Cleaning up existing Docker images..."
          # 기존 프로젝트 이미지들 삭제
          docker images | grep -E "${{ env.DOCKER_USERNAME }}/(main-server|chat-server|frontend)" | awk '{print $3}' | xargs -r docker rmi -f || true
          docker image prune -f || true

      # Docker 이미지 빌드 및 푸시 (각 컴포넌트별)
      - name: Build and push Main Server image
        if: matrix.component == 'main-server'
        run: |
          cd backend/main-server
          docker build -t ${{ env.DOCKER_USERNAME }}/main-server:${{ github.sha }} .
          docker tag ${{ env.DOCKER_USERNAME }}/main-server:${{ github.sha }} ${{ env.DOCKER_USERNAME }}/main-server:latest
          docker push ${{ env.DOCKER_USERNAME }}/main-server:${{ github.sha }}
          docker push ${{ env.DOCKER_USERNAME }}/main-server:latest

      - name: Build and push Chat Server image
        if: matrix.component == 'chat-server'
        run: |
          cd backend/chat-server
          docker build -t ${{ env.DOCKER_USERNAME }}/chat-server:${{ github.sha }} .
          docker tag ${{ env.DOCKER_USERNAME }}/chat-server:${{ github.sha }} ${{ env.DOCKER_USERNAME }}/chat-server:latest
          docker push ${{ env.DOCKER_USERNAME }}/chat-server:${{ github.sha }}
          docker push ${{ env.DOCKER_USERNAME }}/chat-server:latest

      - name: Build and push Frontend image
        if: matrix.component == 'frontend'
        run: |
          cd frontend
          docker build -t ${{ env.DOCKER_USERNAME }}/frontend:${{ github.sha }} .
          docker tag ${{ env.DOCKER_USERNAME }}/frontend:${{ github.sha }} ${{ env.DOCKER_USERNAME }}/frontend:latest
          docker push ${{ env.DOCKER_USERNAME }}/frontend:${{ github.sha }}
          docker push ${{ env.DOCKER_USERNAME }}/frontend:latest
