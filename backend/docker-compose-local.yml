version: '3.8'

services:
  # Redis 캐시 및 세션, JWT 블랙리스트 용도
  redis:
    image: redis:7.0
    container_name: orgtalk-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: [ "redis-server", "--appendonly", "yes" ]
    networks:
      - orgtalk-net
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis 모니터링용 Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: orgtalk-redis-exporter
    restart: always
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis:6379
    networks:
      - orgtalk-net
    depends_on:
      redis:
        condition: service_healthy

  # Prometheus: Redis Exporter, Kafka Exporter 등이 수집 대상
  prometheus:
    image: prom/prometheus:latest
    container_name: orgtalk-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - orgtalk-net
    depends_on:
      redis-exporter:
        condition: service_started
      # 필요시 Kafka Exporter를 사용한다면 여기에 depends_on 추가

  # InfluxDB: 시계열 저장 (예: 애플리케이션 메트릭을 저장할 때)
  influxdb:
    image: influxdb:1.8
    container_name: orgtalk-influxdb
    restart: always
    ports:
      - "8086:8086"
    volumes:
      - influxdb-data:/var/lib/influxdb
    networks:
      - orgtalk-net

  # Grafana: 대시보드
  grafana:
    image: grafana/grafana:latest
    container_name: orgtalk-grafana
    restart: always
    ports:
      - "3001:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - orgtalk-net
    depends_on:
      - prometheus
      - influxdb

  # MySQL: 기존 사용하던 관계형 DB
  mysql:
    image: mysql:latest
    container_name: orgtalk-mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: "0525"
      MYSQL_DATABASE: orgtalk
      MYSQL_USER: "Yuhan"
      MYSQL_PASSWORD: "0525"
    ports:
      - "3306:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - orgtalk-net
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB: 채팅 메시지 저장 등 NoSQL 용도
  mongodb:
    image: mongo:latest
    container_name: orgtalk-mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    volumes:
      - mongo-data:/data/db
    networks:
      - orgtalk-net
    healthcheck:
      test: [ "CMD", "mongo", "--username", "admin", "--password", "admin123", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka: 메시징 미들웨어 (KRaft 모드)
  kafka:
    image: bitnami/kafka:latest
    container_name: orgtalk-kafka
    restart: always
    ports:
      - "9092:9092"   # 클라이언트 접속용
      - "9093:9093"   # 컨트롤러 노드 통신용
    environment:
      # KRaft 모드 설정 (Zookeeper 없이 동작)
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_NODE_ID=1
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      # 토픽 설정: chat-messages 토픽 5개 파티션, 복제팩터 1
      - KAFKA_CREATE_TOPICS=chat-messages:5:1
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_NUM_PARTITIONS=5
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      # KRaft 추가 설정
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - orgtalk-net
    healthcheck:
      # 간단히 포트 오픈 여부를 체크하거나 kafka-topics 명령어로 점검 가능
      test: [ "CMD-SHELL", "echo > /dev/tcp/localhost/9092" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # (선택) Kafka Exporter: Prometheus로 메트릭 수집 시 사용
  # kafka-exporter:
  #   image: danielqsj/kafka-exporter:latest
  #   container_name: orgtalk-kafka-exporter
  #   restart: always
  #   ports:
  #     - "9308:9308"
  #   environment:
  #     KAFKA_SERVER: "kafka:9092"
  #   networks:
  #     - orgtalk-net
  #   depends_on:
  #     kafka:
  #       condition: service_healthy

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  influxdb-data:
    driver: local
  grafana-data:
    driver: local
  mysql-data:
    driver: local
  mongo-data:
    driver: local
  kafka-data:
    driver: local

networks:
  orgtalk-net:
    driver: bridge
