server:
  port: 8081
  tomcat:
    mbeanregistry:
      enabled: true

spring:
  application:
    name: chat-server

  datasource:
    url: jdbc:mysql://localhost:3306/orgtalk
    username: Yuhan
    password: '****'
    driver-class-name: com.mysql.cj.jdbc.Driver

  data:
    mongodb:
      host: localhost
      port: 27017
      database: orgTalk
      username: admin
      password: '****'
      authentication-database: admin

    redis:
      host: localhost
      port: 6379

  sql:
    init:
      mode: always
      schema-locations: classpath:schema.sql

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      group-id: ${spring.application.name}-${random.uuid}
      auto-offset-reset: latest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.example.chat.domain
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer

custom:
  jwt:
    duration:
      access: 360000         # Access Token: 60분 (밀리초 기준)
      refresh: 86400000      # Refresh Token: 24시간 (밀리초 기준)
    secrets:
      origin-key: ****
      app-key: ****

management:
  endpoints:
    web:
      exposure:
        include: health, info, prometheus
  endpoint:
    prometheus:
      enabled: true

logging:
  level:
    # STOMP 프로토콜 처리 로그
    org.springframework.web.socket.messaging.StompSubProtocolHandler: DEBUG
    # WebSocket 핸드셰이크 및 서버 측 처리
    org.springframework.web.socket.server: DEBUG
    # SockJS 관련 로그 (클라이언트 fall-back 경로)
    org.springframework.web.socket.sockjs: DEBUG
    # Optional: Spring 메시징 전체 로그
    org.springframework.messaging: DEBUG
